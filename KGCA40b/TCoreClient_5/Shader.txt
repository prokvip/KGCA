struct VS_OUTPUT
{
	float4 p : SV_POSITION;
	float4 c : COLOR0;    // COLOR0 ~ COLOR1
	float2 t : TEXCOORD0; // TEXCOORD0 ~ TEXCOORD15
};

// 상수버퍼(단위:레지스터 단위(float4)로 할당되어야 한다.)
cbuffer cb0 : register(b0)
{
	float4   Color0 : packoffset(c0);
	float    TimerX : packoffset(c1.x); // Timer.x, Timer.y, Timer.z, Timer.w	
};
cbuffer cb1 : register(b1)
{
	float4   Color1 : packoffset(c0);
	float4   Timer1 : packoffset(c1);
};
VS_OUTPUT VS(float2 p: POSITION, float2 t : TEXCOORD) 
{
	VS_OUTPUT pOut = (VS_OUTPUT)0;
	float fScaleX = cos(TimerX)*0.5f+0.5f;
	float fScaleY = sin(TimerX)*0.5f+0.5f;
	pOut.p = float4(p.x,p.y,0.0f,1.0f);
	pOut.t = t;
	pOut.c = Color0;
	return pOut;
}
Texture2D		g_txColor : register(t0);
Texture2D		g_txMask : register(t1);
SamplerState	g_Sample : register(s0);

float4 PS(VS_OUTPUT input) : SV_TARGET
{	
	//텍스처에서 t좌표에 해당하는 컬러값(픽셀) 반환
	float4 color = g_txColor.Sample(g_Sample, input.t);
	float4 mask = g_txMask.Sample(g_Sample, input.t);
	float4 final = color;	
	// 소스알파(1) = 마스크이미지의 검정색부분은 불투명된다.
	// 소스알파(0) = 마스크이미지의 흰색부분은   투명된다.
	final = final * input.c;
	final.a = 1.0f-mask.r;	
	return final;
}

float4 PSAlphaBlend(VS_OUTPUT input) : SV_TARGET
{	
	//sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v2.xyxx, t0.xyzw, s0 
	float4 color = g_txColor.Sample(g_Sample, input.t);		
	float4 final = color * input.c;
	//mul o0.xyz, r0.xyzx, v1.xyzx
	final.a = color.a;
	//mov o0.w, r0.w  
	return final;
}