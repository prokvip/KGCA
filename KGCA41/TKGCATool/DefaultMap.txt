#include "Default.h"
struct VS_IN
{
	float3 p : POSITION; 
	float3 n : NORMAL; 
    float4 c : COLOR;
	float2 t : TEXTURE;
};
struct VS_OUT
{
	float4 p : SV_POSITION;
	float3 n : NORMAL; 
	float4 c : COLOR0;
	float2 t : TEXCOORD0;
	float3 L : TEXCOORD1;
};

VS_OUT VS(VS_IN input) 
{
#ifdef EXAMPLE_DEFINE
#endif
	VS_OUT output = (VS_OUT)0;
	float4 vLocal = float4(input.p,1.0f);
	// 중요:  mul 함수는 내적으로 처리된다.
	// vWolrd.x = vLocal dot c0; // 행*행
	// vWolrd.y = vLocal dot c1;
	// vWolrd.z = vLocal dot c2;
	// vWolrd.w = vLocal dot c3;	
	matrix matNormal = transpose(g_matWorldInverse);
	float4 vWorld = mul(vLocal, g_matWorld);
	float4 vView = mul(vWorld, g_matView);
	float4 vProj = mul(vView, g_matProj);	
	output.p = vProj;
	output.c = input.c;
	output.t = input.t;
	output.n = mul(input.n.xyz, matNormal);
	return output;
}

float4 PS(VS_OUT input) : SV_Target
{
	float4 vColor = g_txTex.Sample(g_SampleWrap , input.t);
	float fDot = dot(-g_vLightDir, input.n);
	float4 vAmbintColor = float4(0.3f,0.3f,0.3f,1.0f);
	float4 vLightColor = float4(1.0f,0.0f,0.0f,1.0f);
	float vFinalLight = (vLightColor*max(0.0f,fDot)+vAmbintColor);
	float4 fFinalColor = vColor*vFinalLight;
	fFinalColor.a = 1.0f;
	return fFinalColor;	
}

float4 PSColor(VS_OUT input) : SV_Target
{
	return input.c;
}