#include "Default.h"
struct VS_IN
{
	float3 p : POSITION; 
	float3 n : NORMAL; 
    float4 c : COLOR;
	float2 t : TEXTURE;

	float4 index : INDEX;
	float4 weight : WEIGHT;
};
struct VS_OUT
{
	float4 p : SV_POSITION;
	float3 n : NORMAL;
	float4 c : COLOR0;
	float2 t : TEXCOORD0;
	float4 lightcolor : TEXCOORD1;
	float4 vWorld : TEXCOORD2;
	float3 vLight : TEXCOORD3;
	float4 TexShadow : TEXCOORD4;
};

cbuffer cb_Animation : register(b1)
{
	matrix  g_matBone[255];
};
VS_OUT VS(VS_IN input) 
{
	VS_OUT output = (VS_OUT)0;
	float4 vLocal = float4(input.p,1.0f);
	float4 vAnim=0;
	float4 vAnimNomal=0;
	for( int iBone=0; iBone < 4; iBone++)
	{
		uint iBoneIndex = input.index[iBone];
		float fWeight = input.weight[iBone];
		vAnim += mul(vLocal, g_matBone[iBoneIndex]) * fWeight;
		vAnimNomal += mul(input.n, g_matBone[iBoneIndex]) * fWeight;
	}
	float4 vWorld = mul(vAnim, g_matWorld);
	float4 vView = mul(vWorld, g_matView);
	float4 vProj = mul(vView, g_matProj);	
	output.p = vProj;
	output.n = vAnimNomal;
	output.vWorld = vWorld;
	//light
	float3 vLight = g_vLightDir.xyz;//float3(0,-1,0);
	output.vLight = vLight;
	float fDot = max(0.3f, dot(vAnimNomal, -vLight));
	output.lightcolor = float4(fDot,fDot,fDot,1);
	output.c =input.c;
	output.t = input.t;

	output.TexShadow = mul(float4(input.p,1.0f), g_matShadow );
	return output;
}

float4 PS(VS_OUT input) : SV_Target
{
	float3 ShadowTexColor =input.TexShadow.xyz / input.TexShadow.w;
	float  fShadowDepth = g_txDepthShadow.SampleCmpLevelZero(g_samComShadowMap, 
							ShadowTexColor.xy, 
							ShadowTexColor.z);	

	float4 vColor = g_txTex.Sample(g_SampleWrap , input.t);
	fShadowDepth = max(0.7f, fShadowDepth);
	vColor = vColor * float4(fShadowDepth,fShadowDepth,fShadowDepth, 1.0f);
	return vColor;
}

float4 PSColor(VS_OUT input) : SV_Target
{
	return input.c;
}