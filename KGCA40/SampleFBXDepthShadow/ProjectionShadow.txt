// 정해진 출력 양식(반드시 정점 위치는 SV_POSITION에 저장해야 한다.)
// 정해진 레지스터에서 정해진 레지스터로 저장한다.
// 레지스터-> x,y,z,w  9.0 -> 65545/4
cbuffer cbData
{
	matrix g_matWorld	: packoffset(c0);
	matrix g_matView	: packoffset(c4);
	matrix g_matProj	: packoffset(c8);	
	matrix g_matNormal	: packoffset(c12);
	float  g_fTimer     : packoffset(c16.z);		
};

struct VS_OUT
{
	float4 p : SV_POSITION;
	float3 n : NORMAL;
	float4 c : COLOR0;
	float2 t : TEXCOORD0;
	float4 s : TEXCOORD1;
};
//NULL Sampler maps to default Sampler state
VS_OUT VS(	float3 p: POSITION, 
			float3 n : NORMAL,
			float4 c : COLOR, 
            float2 t : TEXTURE) 
{
	VS_OUT output = (VS_OUT)0;
	float4 vLocal = float4(p,1.0f);	
	float4 vWorld = mul( vLocal, g_matWorld);
	float4 vView = mul( vWorld, g_matView);
	float4 vProj = mul( vView, g_matProj);
	output.s = mul(vWorld, g_matNormal);
	output.p = vProj;
	output.n = n;
	float depth1 = vProj.z * 1.0f / (500.0f - 1.0f) + -1.0f / (500.0f - 1.0f);		
	output.c = float4(depth1, depth1, depth1,1);	
	output.t = t;
	return output;
}

Texture2D g_txDiffuse : register(t0);
Texture2D g_txShadow  : register(t1);
SamplerState g_Sampler : register(s0);
SamplerState g_SamplerClamp : register(s1);

float4 PS( VS_OUT v ) : SV_TARGET
{
	float3 vShadowProj;
	vShadowProj.xy = v.s.xy / v.s.w;
	vShadowProj.z = v.s.z * (1.0f / (500.0f - 1.0f)) + (-1.0f / (500.0f - 1.0f));

	float shadow = g_txShadow.Sample(g_SamplerClamp, vShadowProj.xy);
	float4 color = g_txDiffuse.Sample(g_Sampler, v.t);
	float depth =v.s.z * 1.0f / (500.0f - 1.0f) + -1.0f / (500.0f - 1.0f);
	if( shadow+0.01f <= vShadowProj.z )
	{
		color = color * float4(0.5f,0.5f,0.5f,1);
	}
	return color;
}
float4 PSDepth( VS_OUT v ) : SV_TARGET
{
	return v.c;
}